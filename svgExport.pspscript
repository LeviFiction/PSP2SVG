from JascApp import *
import xml.etree.cElementTree as xml
import os

genSilent = {'ExecutionMode': App.Constants.ExecutionMode.Silent, 
             'AutoActionMode': App.Constants.AutoActionMode.Match, 
             'Version': ((9,0,0),1),
             }

def ScriptProperties():
    return {
        'Author': u'LeviFiction',
        'Copyright': u'',
        'Description': u'',
        'Host': u'PaintShop Pro',
        'Host Version': u'21.00'
        }

def Do(Environment):
    svg = makeSVG(Environment)
    print(xml.tostring(svg))
    SaveSVG("C:\\Users\\matthewjohnson\\desktop\\testsave.svg", svg)
    
def makeSVG(Environment, includeRaster=False, Embed=True):
    rootTree = xml.Element('svg', {'version':"1.1", 'width':str(App.TargetDocument.Width), 'height':str(App.TargetDocument.Height), 'xmlns': "http://www.w3.org/2000/svg"})
    selectBottomLayer(Environment)
    newLayer = True
    while newLayer:
        result = returnLayerProperties(Environment)
        print(result['LayerType'])
        if result['LayerType'] in [0, 4,5,6,7,8,9,10,11,12,13,14,15] and includeRaster:
            print("Not a good layer")
        elif result['LayerType'] == 1:
            print("Good layer")
            group = createGroup(validName(result['General']['Name']))
            objs = True
            while objs:
                objs = nextObject(Environment)
                if objs:
                    obj = objs['ListOfObjects'][0]
                    if obj['ObjectType'] == 'Group':
                        createVectorGroup(group, objs)
                    elif obj['ObjectType'] == 'Rectangle':
                        d = obj['RectangleData']
                        print(d['Matrix'])
                        addRect(group, d['ObjectName'], d['Top'], d['Left'],d['Width'], d['Height'], d['RadiusX'], d['RadiusY'], d['Matrix'])
                    elif obj['ObjectType'] == 'Ellipse':
                        d = obj['EllipseData']
                        print(d['Matrix'])
                        addEllipse(group, d['ObjectName'], d['CenterX'], d['CenterY'], d['RadiusX'], d['RadiusY'], d['Matrix'])
                    elif obj['Path']:
                        d = obj['ObjectData']
                        addPath(group, d['ObjectName'], d['Path'])
            rootTree.insert(len(rootTree), group)
        newLayer = selectNextLayer(Environment)

    return rootTree

def createGroup(id):
    return xml.Element('g', {'id': id})

def createVectorGroup(group, groupData):
    groups = []
    for i in groupData['ListOfObjects']:
        if i['ObjectType'] == 'Group':
            groups.append(xml.Element('g', {'id':validName(i['GroupName']), 'count':i['Child Count']}))
        elif i['ObjectType'] == 'Rectangle':
            d = i['RectangleData']
            print(d['Matrix'])
            addRect(groups[-1], validName(d['ObjectName']), d['Top'], d['Left'],d['Width'], d['Height'], d['RadiusX'], d['RadiusY'], d['Matrix'])
        elif i['ObjectType'] == 'Ellipse':
            d = i['EllipseData']
            print(d['Matrix'])
            addEllipse(groups[-1], validName(d['ObjectName']), d['CenterX'], d['CenterY'], d['RadiusX'], d['RadiusY'], d['Matrix'])
        elif i['Path']:
            d = i['ObjectData']
            addPath(group, d['ObjectName'], d['Path'])
        print(groups[-1].attrib)
        if groups[-1].attrib['count'] == len(groups[-1]):
            if len(groups) > 1:
                g = groups.pop()
                g.attrib.pop('count')
                groups[-1].insert(len(groups[-1]), g)
    groups[-1].attrib.pop('count')
    group.insert(len(group), groups[-1])

def addType(data):
    pass

def validName(Name):
    return Name.replace(" ", "_")

def SaveSVG(filename, rootTree):
    top = "<?xml version='1.0' standalone='no'?>"
    doctype = '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'
    #svg = xml.Element('svg', {'version':"1.1", 'width':"1920", 'height':"1080", 'xmlns': "http://www.w3.org/2000/svg"})
    with open(filename, 'w') as f:
        f.write(top)
        f.write(doctype)
        f.write(xml.tostring(rootTree))

def addEllipse(root, id, x,y,rx,ry,matrix=None):
    print("Entered Ellipse")
    print(matrix)
    if matrix:
        xml.SubElement(root, 'ellipse', {'id': id, 'cx': str(x), 'cy': str(y), 'rx':str(rx), 'ry':str(ry), 'transform':pspMatrixToSVG(matrix) })        
    else:
        xml.SubElement(root, 'ellipse', {'id': id, 'cx': str(x), 'cy': str(y), 'rx':str(rx), 'ry':str(ry)})

def addRect(root, id, top, left, width, height, rx, ry, matrix = None):
    print("Entered Rectangle")
    print(matrix)
    if matrix:
        xml.SubElement(root, 'rect', {'id': id, 'x': str(left), 'y': str(top), 'width':str(width), 'height':str(height), 'rx':str(rx), 'ry':str(ry), 'transform':pspMatrixToSVG(matrix) })        
    else:
        xml.SubElement(root, 'rect', {'id': id, 'x': str(left), 'y': str(top), 'width':str(width), 'height':str(height), 'rx':str(rx), 'ry':str(ry)})

def addPath(root, id, path):
    cmd = ['M', 'L', 'C', 'Z']
    pathstr = ""
    for node in path:
        pathstr += cmd[node[0]]
        for i,d in enumerate(node):
            if i == 0:
                continue
            pathstr += ",".join(list(map(str, d)))
    xml.SubElement(root, 'path', {'id':id, 'd':path})

def embedImage(Environment, root, filename):
    svgpng = os.path.join(os.environ['USERPROFILE'], 'AppData\\Local\\Temp\\', 'svgpng.png')
    openImage(Environment, filename)
            
    Doc = App.Documents[-1]
    w = Doc.Width
    h = Doc.Height
    # FileSaveCopyAs
    App.Do( Environment, 'FileSaveCopyAs', {
            'Encoding': {'PNG': {'Interlaced': False, 'OptimizedPalette': True, 'AlphaChannel': True }}, 
            'FileName': svgpng, 
            'FileFormat': App.Constants.FileFormat.PNG, 
            'FormatDesc': u'PNG Portable Network Graphics', 
            'WorkingMode': 0, 
            'GeneralSettings': genSilent, 
            'DefaultProperties': []
            }, Doc)
    App.Do( Environment, 'FileClose', {}, Doc)
    with open("%userprofile%\\AppData\\Local\\Temp\\svgpng.png", 'rb') as f:
        data = f.read()
        xml.SubElement(root, 'image', {'width':str(w), 'height':str(h), 'href':'data:iamge/png;base64,' + data.encode("base64")})

def openImage(Environment, filename =""):
    inter = App.Constants.ExecutionMode.Interactive
    mode = genSilent.copy()
    if filename:
        mode['ExecutionMode'] = inter
    # FileOpen
    App.Do( Environment, 'FileOpen', {
            'FileList':[filename], 
            'Folder': u'C:\\Users\\matthewjohnson\\Pictures', 
            'FileFormat': App.Constants.FileFormat.Unknown, 
            'ShowPreview': True, 
            'EnableBrowser': True, 
            'FavFileList': [], 
            'FileOpenScript': u'', 
            'EnablePreprocessing': False, 
            'GeneralSettings': mode
            })

def pspMatrixToSVG(matrix):
    print("Entered Matrix")
    print(matrix)
    if matrix:
        return "matrix"+str((matrix[0],matrix[3],matrix[1],matrix[4],matrix[2],matrix[5]))
    return None

def selectBottomLayer(Environment):
    App.Do(Environment, 'SelectLayer', {'Path': (9999, -9999, [], False)})

def selectNextLayer(Environment):
    return App.Do(Environment, 'SelectNextLayer', {})

def nextObject(Environment):
    if App.Do(Environment, 'GetNextObject')['HaveObject']:
        return returnVectorProperties(Environment)
    else:
        return None

def returnLayerProperties(Environment):
    return App.Do(Environment, 'ReturnLayerProperties')

def returnVectorProperties(Environment):
    return App.Do(Environment, 'ReturnVectorObjectProperties', {})
